var express = require('express');
var router = express.Router();

var Bird = require('../models/bird.js');

/* GET home page. */
router.get('/', function(req, res, next) {

  //Ask the schema to find all Bird documents.
  //Results provided via callback
  Bird.find(function(err, birdDocs){
    if (err) { return next(err); }
    return res.render('index', { birds: birdDocs, error : req.flash('error') });
  });
});

//Post request to create new bird - generated by form
router.post('/', function(req, res, next ){

  //As are not requiring every field, remove any empty fields from req.body
  for(var att in req.body){
    if (req.body[att]==''){
      delete (req.body[att])
    }
  }

  var date = req.body.datesSeen || Date.now();
  console.log(req.body.datesSeen);

  req.body.datesSeen = []; // date is going to be an array now
  req.body.datesSeen.push(date);

  //Build nested nestData
  req.body.nestData = {
    'location': req.body.location,
    'materials': req.body.materials
  };


  //Create new bird object from req.body
  var newSighting = Bird(req.body);

  //And request that is it saved. Use callback to verify success or report error.
  newSighting.save(function (err) {
    //Handle validation errors
    if(err){
      if (err.name == "validationError"){
        req.flash('error', 'Invalid data');
        return res.redirect('/');
      }
      //Handle duplication error. For our schema we can't have two birds with
      if (err.code == 11000){ // MongoDB duplicate key error
        req.flash('error', 'A bird with that name already exists');
        return res.redirect('/');
      }

      //Some other error  - pass to app err....
      return next(err);

    }
    //If no error, bird created
    res.status(201); //created
    return res.redirect('/');
  });
});


router.post('/addDate', function(req, res, next){

  //Check if user provided a date
  var newSighting = req.body.dateSeen;
  console.log(req.body);
  if(!newSighting || newSighting == ''){
    return res.redirect('/');
  }

  //Need to find the bird with this name,
  //add the new date to dateSeen, and save it
  Bird.findOne ({name : req.body.name}, function (err, bird) {
    if (err) {return next (err) }
    //If no bird found, then send message to app error handler
    if (!bird){ return next(new Error('No bird found with name' + req.body.name))}

    bird.datesSeen.push(newSighting); //Add this date to datesSeen array

    bird.save(function(err){
      if (err) { return next(err);}
      res.redirect('/')
    });
  })
});

module.exports = router;